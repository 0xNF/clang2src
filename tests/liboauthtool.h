

/* DO NOT EDIT THIS FILE: It is generated with clang2src and will be regenerated whenever OAuthTool(rust) is updated */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * FYI(NF): Somewhere along the way, `c_char` disappeared from std::ffi?
 */
#define OAUTHTOOL_PASS 0

#define OAUTHTOOL_FAIL 1

#define OAUTHTOOL_FAIL_NULL_POINTER 2

#define DEFINE_SERVER 1

/**
 * Code Challenge for PKCE-enabled Authorization Code Flow
 * https://www.rfc-editor.org/rfc/rfc7636#section-4.2
 *
 * If PKCE is not enabled, use [CodeChallengeMethod.None]
 */
typedef enum CodeChallengeMethod {
  /**
   * None, for when the code flow isnt PKCE enabled
   */
  None,
  /**
   * Plain: code_challenge=code_verifier
   */
  Plain,
  /**
   * Sha256: code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
   */
  S256,
} CodeChallengeMethod;

/**
 * Specifies the different types of OAuth Flows
 *
 * Implicit,
 * Client Credentials,
 * Authorization,
 * Authorization + PKCE,
 * Device
 */
typedef enum FlowType {
  /**
   * Implicit Grant
   */
  Implicit,
  /**
   * Client Credentials Grant
   * Gives keys to an application without accessing user-specific resources
   */
  ClientCredentials,
  /**
   * Authorization Grant
   * Allows access to user-specific resources. Usually comes with an infinite-lifespan Refresh Token
   */
  Authorization,
  /**
   * Secure Authorization grant using the PKCE extension
   *
   * Refresh Tokens are one-time-use
   */
  AuthorizationPKCE,
  /**
   * Flow for using a second device, which has a screen, to give access to a primary device, which does not have a screen
   */
  Device,
} FlowType;

/**
 * #meta: persistent;
 */
typedef struct Engine Engine;

/**
 * #meta: persistent;
 */
typedef struct OAuth2Authorization OAuth2Authorization;

/**
 * #meta: persistent;
 */
typedef struct OAuth2ClientCredentials OAuth2ClientCredentials;

/**
 * #meta: persistent;
 */
typedef struct OAuth2Implicit OAuth2Implicit;

/**
 * #meta: persistent;
 */
typedef struct OAuth2PKCE OAuth2PKCE;

typedef struct FFIArray {
  /**
   * Number of elements in the returned array
   *
   * #meta: length(arr);
   */
  uintptr_t len;
  /**
   * Max size of the array
   *
   * #meta: capacity(arr);
   */
  uintptr_t cap;
  /**
   * pointer to the first item in the array
   *
   * #meta: list;
   */
  char *const *arr;
} FFIArray;

typedef struct TokenResponse {
  /**
   * If not null, contains a token that can be used to access the service
   * #meta: string;
   */
  const char *access_token;
  /**
   * If not null, contains a token that can be used to get a new access token
   * #meta: string;nullable;
   */
  const char *refresh_token;
  /**
   * Seconds from received time that the token expires at
   */
  int64_t expires_at;
  /**
   * If not null, denotes what kind of token this is.  Usually Bearer
   * #meta: string;nullable;
   */
  const char *token_type;
  struct FFIArray *scopes;
} TokenResponse;

typedef struct AuthUrlOutput {
  /**
   * #meta: url;
   */
  const char *url;
  /**
   * #meta: nullable; string;
   */
  const char *local_state;
  /**
   * #meta: nullable; string;
   */
  const char *pkce_verifier_state;
} AuthUrlOutput;

typedef struct ParsedAuthorizationCode {
  /**
   * Authorization Code. Always present.
   *
   * #meta: string;
   */
  const char *code;
  /**
   * State returned from server. Should match state given to server. Not always present
   * #meta: nullable;string;
   */
  const char *state;
} ParsedAuthorizationCode;

/**
 * Encrypts a given plain text string with the engine paramaters and returns a Base64-encoded string
 *
 * #meta: throws;
 * #meta_param: encrypted_output;output;string;
 * #meta_param: plain_text;string;
 * #meta_param: err_ptr;error;
 */
uint32_t encrypt(char **encrypted_output,
                 const char *plain_text,
                 struct Engine *engine,
                 char **err_ptr);

/**
 * Decrypts a Base64-Encoded binary blob with the engine parameters and returns a list of bytes.
 *
 * #meta: throws;
 * #meta_param: encrypted_text;string;
 * #meta_param: decrypted_output;output;string;
 * #meta_param: err_ptr;error;
 */
uint32_t decrypt(char **decrypted_output,
                 const char *encrypted_text,
                 struct Engine *engine,
                 char **err_ptr);

/**
 * Initializes a new OAuth2PKCE manager into the `this` pointer
 * #meta: for_struct;static;throws;constructor;
 * #meta_param: this_;output;this;
 * #meta_param: client_id;string;
 * #meta_param: client_secret;string;
 * #meta_param: authorization_url;url;
 * #meta_param: redirect_url;url;
 * #meta_param: token_url;url;
 * #meta_param: scopes;string;
 * #meta_param: timeout_in_milliseconds;duration;
 * #meta_param: err_ptr;error;
 * #meta_param: extra_parameters;string;
 */
uint32_t OAuth2PKCE_new(struct OAuth2PKCE **this_,
                        const char *client_id,
                        const char *client_secret,
                        const char *authorization_url,
                        const char *token_url,
                        const char *redirect_url,
                        enum CodeChallengeMethod challenge_method,
                        const char *scopes,
                        const char *extra_parameters,
                        uint64_t timeout_in_milliseconds,
                        char **err_ptr);

#if defined(DEFINE_SERVER)
/**
 * Launches a local web server and attempts to perform the token exchange automatically
 * This can only be used on devices that have a web browser
 * #meta: for_struct;throws;async;
 * #meta_param: this_;this;
 * #meta_param: token_output;output;
 * #meta_param: err_ptr;error;
 */
uint32_t OAuth2PKCE_get_token_automatic(struct OAuth2PKCE *this_,
                                        struct TokenResponse **token_output,
                                        char **err_ptr);
#endif

#if defined(DEFINE_SERVER)
/**
 * #meta: for_struct;throws;async;
 * #meta_param: this_;this;
 * #meta_param: redirect_url;url;
 * #meta_param: verifier_state;string;
 * #meta_param: token_output;output;
 * #meta_param: timeout_in_milliseconds;duration;
 * #meta_param: err_ptr;error;
 */
uint32_t OAuth2PKCE_start_web_server_for_callback(struct OAuth2PKCE *this_,
                                                  struct TokenResponse **token_output,
                                                  const char *redirect_url,
                                                  const char *verifier_state,
                                                  uint64_t timeout_in_milliseconds,
                                                  char **err_ptr);
#endif

/**
 * Uses the initializes `this` manager to get the Authoirzation URL as known by its parameters
 * #meta: for_struct;throws;
 * #meta_param: this_;this;
 * #meta_param: authorization_output;output;
 * #meta_param: err_ptr;error;
 */
uint32_t OAuth2PKCE_get_authorization_url(struct OAuth2PKCE *this_,
                                          struct AuthUrlOutput **authorization_output,
                                          char **err_ptr);

/**
 * Exchanges an Authorization Code for an Access/Refresh Token
 *
 * If Verifier State is null, defaults to the using the verifier state known to the OAuth2Pkce manager
 *
 * If Verifier State is not null, overwrites the verifier state to that one instead
 * #meta: for_struct;throws;async;
 * #meta_param: this_;this;
 * #meta_param: authorization_code;string;
 * #meta_param: verifier_state;string;
 * #meta_param: token_output;output;
 * #meta_param: err_ptr;error;
 */
uint32_t OAuth2PKCE_exchange_authorization_code_for_token(struct OAuth2PKCE *this_,
                                                          struct TokenResponse **token_output,
                                                          const char *authorization_code,
                                                          const char *verifier_state,
                                                          char **err_ptr);

/**
 * Given a Refresh Token, use it to retrieve a new TokenResponse
 * #meta: for_struct;throws;async;
 * #meta_param: this_;this;
 * #meta_param: err_ptr;error;
 * #meta_param: token_output;output;
 * #meta_param: refresh_token;string;
 */
uint32_t OAuth2PKCE_refresh_access_token(struct OAuth2PKCE *this_,
                                         struct TokenResponse **token_output,
                                         const char *refresh_token,
                                         char **err_ptr);

/**
 * Initializes a new OAuth2Authoirzation manager into the `this` pointer
 * #meta: for_struct;static;throws;constructor;
 * #meta_param: this_;output;this;
 * #meta_param: client_id;string;
 * #meta_param: client_secret;string;
 * #meta_param: authorization_url;url;
 * #meta_param: redirect_url;url;
 * #meta_param: token_url;url;
 * #meta_param: scopes;string;
 * #meta_param: timeout_in_milliseconds;duration;
 * #meta_param: err_ptr;error;
 * #meta_param: extra_parameters;string;
 */
uint32_t OAuth2Authorization_new(struct OAuth2Authorization **this_,
                                 const char *client_id,
                                 const char *client_secret,
                                 const char *authorization_url,
                                 const char *token_url,
                                 const char *redirect_url,
                                 const char *scopes,
                                 const char *extra_parameters,
                                 uint64_t timeout_in_milliseconds,
                                 char **err_ptr);

/**
 * Uses the initializes `this` manager to get the Authoirzation URL as known by its parameters
 * #meta: for_struct;throws;
 * #meta_param: this_;this;
 * #meta_param: authorization_output;output;
 * #meta_param: err_ptr;error;
 */
uint32_t OAuth2Authorization_get_authorization_url(struct OAuth2Authorization *this_,
                                                   struct AuthUrlOutput **authorization_output,
                                                   char **err_ptr);

/**
 * Exchanges an Authorization Code for an Access/Refresh Token
 *
 * If Verifier State is null, defaults to the using the verifier state known to the OAuth2Pkce manager
 *
 * If Verifier State is null, overwrites the verifier state to that one instead
 *
 * #meta: for_struct;throws;async;
 * #meta_param: this_;this;
 * #meta_param: authorization_code;string;
 * #meta_param: token_output;output;
 * #meta_param: err_ptr;error;
 */
uint32_t OAuth2Authorization_exchange_authorization_code_for_token(struct OAuth2Authorization *this_,
                                                                   struct TokenResponse **token_output,
                                                                   const char *authorization_code,
                                                                   char **err_ptr);

/**
 * Given a Refresh Token, use it to retrieve a new TokenResponse
 * #meta: for_struct;throws;async;
 * #meta_param: this_;this;
 * #meta_param: refresh_token;string;
 * #meta_param: token_output;output;
 * #meta_param: err_ptr;error;
 */
uint32_t OAuth2Authorization_refresh_access_token(struct OAuth2Authorization *this_,
                                                  struct TokenResponse **token_output,
                                                  const char *refresh_token,
                                                  char **err_ptr);

/**
 * Given a filled in callback URL (aka 'https://example.com/callback?state=123&code=abc),
 * returns a ParsedAuthorizationCode object containing the state and code
 * #meta: throws;
 * #meta_param: filled_callback_url;string;
 * #meta_param: parsed_authorization_code_output;output;
 * #meta_param: err_ptr;error;
 */
uint32_t parse_authorization_callback_url(struct ParsedAuthorizationCode **parsed_authorization_code_output,
                                          const char *filled_callback_url,
                                          char **err_ptr);

/**
 * Initializes a new Engine to the given pointer
 * #meta: for_struct;static;constructor;throws;
 * #meta_param: engine;this;output;
 * #meta_param: err_ptr;error;
 */
uint32_t Engine_new(struct Engine **engine, char **err_ptr);

/**
 * Frees memory used by a Engine instance
 * #meta: for_struct;destructor;void;
 * #meta_param: engine;this;
 */
void Engine_free(struct Engine *engine);

/**
 * Frees memory used by an OAuthManagerPKCE instance
 * #meta: for_struct;destructor;void;
 * #meta_param: mgr;this;
 */
void OAuth2PKCE_free(struct OAuth2PKCE *mgr);

/**
 * Frees memory used by an OAuthManagerAuthorization instance
 * #meta: for_struct;destructor;void;
 * #meta_param: mgr;this;
 */
void OAuth2Authorization_free(struct OAuth2Authorization *mgr);

/**
 * Frees memory used by an OAuthManagerClientCredentials instance
 * #meta: for_struct;destructor;void;
 * #meta_param: mgr;this;
 */
void OAuth2ClientCredentials_free(struct OAuth2ClientCredentials *mgr);

/**
 * Frees memory used by an OAuthManagerImplicit instance
 * #meta: for_struct;destructor;void;
 * #meta_param: mgr;this;
 */
void OAuth2Implicit_free(struct OAuth2Implicit *mgr);

/**
 * Sets the HTML page to use when the automatic token acquisition flow is used
 * #meta: throws;
 * #meta_param: html_succeess_page_str;string;
 * #meta_param: err_ptr;error;
 */
uint32_t set_html_status_success_page(const char *html_succeess_page_str, char **err_ptr);
